import torchvision
import ActiveLearning as AL
import os
os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "expandable_segments:True" # Needed for memory expansion

transform = torchvision.transforms.Compose([
    torchvision.transforms.ToTensor(),
    torchvision.transforms.Normalize((0.5,), (0.5,))
])


# train_dataset = torchvision.datasets.CIFAR10(root="./data_cifar", download=True, train=True)
# ac = AL.DCoM(train_dataset, unlabelled_size=0.995, label_iterations=7, num_epochs=30, delta=0.515,b=20, debug=False,quiet=True)
# ac.test_methods(n_tests=20, increase_b=True, seeds=[37177, 72341, 15706, 20688, 8470, 96544, 5198, 49480, 51022, 63777, 24823, 44543, 19729, 29476, 273, 22255, 39478, 8268, 60422, 67265])

train_dataset = torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)
#ac = AL.DCoM(train_dataset, unlabelled_size=0.995, label_iterations=7, num_epochs=30,b=25, delta=0.131, debug=False,quiet=True)
#ac.test_methods(n_tests=10, increase_b=True,title_append="6")

acuracia = []
err = []
for i in range(10):
    ac = AL.DCoM(train_dataset, unlabelled_size=0.999, label_iterations=5, num_epochs=30,b=25, delta=0.131, debug=False,quiet=True)
    res = ac.test_methods(n_tests=1, increase_b=False,title_append="7")
    acuracia.append([res[1]])


print(acuracia)
print(err)



import numpy as np

a = [[[np.array([[12.33538923],
       [44.024004  ],
       [33.50558426],
       [79.32988831],
       [80.8468078 ]]), np.array([[10.23503917],
       [15.91931989],
       [26.80446741],
       [73.79563261],
       [80.88014669]]), np.array([[10.23503917],
       [37.62293716],
       [27.837973  ],
       [77.02950492],
       [81.13018836]]), np.array([[10.23503917],
       [25.23753959],
       [26.55442574],
       [76.31271879],
       [81.24687448]]), np.array([[10.23503917],
       [22.30371729],
       [28.70478413],
       [69.59493249],
       [71.27854642]]), np.array([[10.23503917],
       [30.82180363],
       [26.78779797],
       [66.17769628],
       [68.39473246]]), np.array([[10.23503917],
       [31.02183697],
       [38.05634272],
       [75.14585764],
       [80.78013002]])]], [[np.array([[12.33538923],
       [31.98866478],
       [30.82180363],
       [69.52825471],
       [78.14635773]]), np.array([[10.23503917],
       [15.81930322],
       [23.02050342],
       [74.91248541],
       [79.96332722]]), np.array([[10.23503917],
       [37.65627605],
       [32.58876479],
       [76.62943824],
       [80.81346891]]), np.array([[10.23503917],
       [24.85414236],
       [27.40456743],
       [73.1621937 ],
       [80.34672445]]), np.array([[10.23503917],
       [22.20370062],
       [29.63827305],
       [69.82830472],
       [71.09518253]]), np.array([[10.23503917],
       [31.03850642],
       [26.87114519],
       [65.97766294],
       [67.77796299]]), np.array([[10.23503917],
       [30.30505084],
       [34.20570095],
       [74.14569095],
       [78.56309385]])]], [[np.array([[12.33538923],
       [31.28854809],
       [35.6726121 ],
       [74.37906318],
       [78.79646608]]), np.array([[10.23503917],
       [15.78596433],
       [26.22103684],
       [79.16319387],
       [81.79696616]]), np.array([[10.23503917],
       [38.18969828],
       [43.02383731],
       [76.31271879],
       [77.67961327]]), np.array([[10.23503917],
       [24.65410902],
       [24.52075346],
       [78.64644107],
       [80.01333556]]), np.array([[10.23503917],
       [21.78696449],
       [29.90498416],
       [70.0450075 ],
       [71.61193532]]), np.array([[10.23503917],
       [30.7717953 ],
       [28.45474246],
       [65.52758793],
       [68.82813802]]), np.array([[10.23503917],
       [30.42173696],
       [34.43907318],
       [73.51225204],
       [76.32938823]])]], [[np.array([[12.33538923],
       [30.2883814 ],
       [24.68744791],
       [75.14585764],
       [79.76329388]]), np.array([[10.23503917],
       [16.01933656],
       [26.92115353],
       [76.16269378],
       [77.41290215]]), np.array([[10.23503917],
       [37.85630938],
       [42.09034839],
       [78.46307718],
       [81.0301717 ]]), np.array([[10.23503917],
       [25.08751459],
       [25.73762294],
       [76.22937156],
       [79.3632272 ]]), np.array([[10.23503917],
       [22.05367561],
       [28.63810635],
       [70.01166861],
       [71.44524087]]), np.array([[10.23503917],
       [31.15519253],
       [28.22137023],
       [66.21103517],
       [68.14469078]]), np.array([[10.23503917],
       [30.2883814 ],
       [36.83947325],
       [72.8288048 ],
       [81.08018003]])]], [[np.array([[12.33538923],
       [24.2373729 ],
       [27.33788965],
       [70.31171862],
       [77.56292715]]), np.array([[10.23503917],
       [16.00266711],
       [30.82180363],
       [74.49574929],
       [78.81313552]]), np.array([[10.23503917],
       [37.72295383],
       [30.07167861],
       [75.37922987],
       [82.69711619]]), np.array([[10.23503917],
       [24.78746458],
       [28.25470912],
       [75.4625771 ],
       [80.83013836]]), np.array([[10.23503917],
       [22.00366728],
       [29.05484247],
       [69.64494082],
       [71.29521587]]), np.array([[10.23503917],
       [30.93848975],
       [27.27121187],
       [65.39423237],
       [67.62793799]]), np.array([[10.23503917],
       [29.97166194],
       [32.98883147],
       [76.29604934],
       [77.4295716 ]])]], [[np.array([[12.33538923],
       [26.5044174 ],
       [37.92298716],
       [76.56276046],
       [79.26321054]]), np.array([[10.23503917],
       [15.83597266],
       [32.08868145],
       [76.51275213],
       [76.86281047]]), np.array([[10.23503917],
       [37.77296216],
       [38.15635939],
       [77.39623271],
       [79.79663277]]), np.array([[10.23503917],
       [25.07084514],
       [20.88681447],
       [80.08001334],
       [83.66394399]]), np.array([[10.23503917],
       [22.02033672],
       [28.57142857],
       [70.01166861],
       [71.07851309]]), np.array([[10.23503917],
       [30.75512585],
       [27.80463411],
       [65.32755459],
       [68.57809635]]), np.array([[10.23503917],
       [30.57176196],
       [36.70611769],
       [78.46307718],
       [82.93048841]])]], [[np.array([[12.33538923],
       [37.62293716],
       [38.27304551],
       [75.67927988],
       [78.62977163]]), np.array([[10.23503917],
       [15.98599767],
       [27.77129522],
       [77.62960493],
       [79.51325221]]), np.array([[10.23503917],
       [37.67294549],
       [34.57242874],
       [75.81263544],
       [78.62977163]]), np.array([[10.23503917],
       [24.88748125],
       [27.15452575],
       [76.77946324],
       [81.41356893]]), np.array([[10.23503917],
       [21.40356726],
       [28.60476746],
       [69.62827138],
       [70.89514919]]), np.array([[10.23503917],
       [31.4385731 ],
       [26.80446741],
       [65.86097683],
       [67.82797133]]), np.array([[10.23503917],
       [30.73845641],
       [37.57292882],
       [76.36272712],
       [80.83013836]])]], [[np.array([[12.33538923],
       [30.55509252],
       [42.34039007],
       [78.12968828],
       [80.46341057]]), np.array([[10.23503917],
       [15.98599767],
       [25.50425071],
       [77.62960493],
       [80.08001334]]), np.array([[10.23503917],
       [37.73962327],
       [26.8378063 ],
       [75.86264377],
       [80.71345224]]), np.array([[10.23503917],
       [25.0541757 ],
       [27.82130355],
       [76.89614936],
       [79.5465911 ]]), np.array([[10.23503917],
       [21.32022004],
       [28.62143691],
       [69.94499083],
       [71.14519087]]), np.array([[10.23503917],
       [31.20520087],
       [28.30471745],
       [65.59426571],
       [68.92815469]]), np.array([[10.23503917],
       [31.12185364],
       [34.35572595],
       [76.54609102],
       [80.11335223]])]], [[np.array([[12.33538923],
       [33.35555926],
       [27.87131189],
       [74.6457743 ],
       [79.77996333]]), np.array([[10.23503917],
       [16.06934489],
       [27.60460077],
       [75.87931322],
       [79.29654942]]), np.array([[10.23503917],
       [38.02300383],
       [32.17202867],
       [77.62960493],
       [83.28054676]]), np.array([[10.23503917],
       [24.92082014],
       [26.70445074],
       [76.51275213],
       [80.64677446]]), np.array([[10.23503917],
       [21.38689782],
       [29.67161194],
       [69.77829638],
       [71.17852975]]), np.array([[10.23503917],
       [30.63843974],
       [28.37139523],
       [66.07767961],
       [67.84464077]]), np.array([[10.23503917],
       [29.80496749],
       [27.00450075],
       [75.07917986],
       [79.19653276]])]], [[np.array([[12.33538923],
       [28.28804801],
       [26.08768128],
       [73.29554926],
       [78.42973829]]), np.array([[10.23503917],
       [15.885981  ],
       [25.67094516],
       [76.69611602],
       [81.28021337]]), np.array([[10.23503917],
       [37.98966494],
       [33.08884814],
       [75.19586598],
       [80.56342724]]), np.array([[10.23503917],
       [24.97082847],
       [21.38689782],
       [76.17936323],
       [80.89681614]]), np.array([[10.23503917],
       [21.35355893],
       [28.82147025],
       [69.8949825 ],
       [70.94515753]]), np.array([[10.23503917],
       [30.72178696],
       [27.30455076],
       [65.87764627],
       [68.66144357]]), np.array([[10.23503917],
       [30.32172029],
       [38.60643441],
       [75.4625771 ],
       [77.77962994]])]]]


# get the mean and std of the results
num_samples = len(a)
num_results = len(a[0][0])
num_values = a[0][0][0].shape[0]

values = np.zeros((num_samples, num_results, num_values))

for i in range(num_samples):
    for j in range(num_results):
        values[i, j] = a[i][0][j].flatten()

mean_values = np.mean(values, axis=0)
print("Mean values:\n", mean_values)
std_values = np.std(values, axis=0)
print("Standard deviation values:\n", std_values)

# Print mean and standard deviation for each method
for i in range(num_results):
    print(f"Method {i+1}:")
    print("Mean:", mean_values[i])
    print("Std Dev:", std_values[i])
